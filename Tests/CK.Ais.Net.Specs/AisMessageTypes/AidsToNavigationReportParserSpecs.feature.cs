// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CK.Ais.Net.Specs.AisMessageTypes
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AidsToNavigationReportParserSpecsSteps")]
    public partial class AidsToNavigationReportParserSpecsStepsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "AidsToNavigationReportParserSpecs.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AisMessageTypes", "AidsToNavigationReportParserSpecsSteps", "    In order process AIS messages from an nm4 file\r\n    As a developer\r\n    I wan" +
                    "t the NmeaAisAidsToNavigationReportParser to be able to parse the payload sectio" +
                    "n of message type 21: Aids to Navigation Report", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Message Type")]
        public void MessageType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Message Type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
    testRunner.When("I parse \'Evlt<Cf50QUaWW@97QUP0000000D8U=0r5W0P00003jP10\' with padding 0 as a Aids" +
                        " to Navigation Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
    testRunner.Then("NmeaAisAidsToNavigationReportParser.Type is 21", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Full message")]
        [NUnit.Framework.TestCaseAttribute("Evlt<Cf50QUaWW@97QUP0000000D8U=0r5W0P00003jP10", "0", "21", "3", "995036238", "28", "JACKSON ROCK@@@@@@@@", "true", "69358400", "-12399100", "0", "0", "0", "0", "7", "37", "false", "0", "false", "true", "false", "false", "", "0", null)]
        [NUnit.Framework.TestCaseAttribute("E>nRFnO77h0W1T7a9hFh84`2V4W@3AEb1fHgh00003aP11H0DQ@H>@", "0", "21", "0", "996710105", "30", "NO ANCHORS - PIPELIN", "true", "857450", "3617150", "0", "0", "0", "0", "7", "19", "false", "0", "false", "true", "false", "false", "E AREA 9", "0", null)]
        [NUnit.Framework.TestCaseAttribute("E>nlfV1`:Rab7h;4Sh<h1WW:@:9MbW`ghDbC@10888gh20A`0UAC`4m@iDh", "0", "21", "0", "997011096", "3", "PUESTO VIG Y CONT TR", "true", "-39159249", "-32877414", "1", "1", "1", "1", "1", "31", "true", "0", "true", "false", "false", "false", "AF BUEN SUCES", "0", null)]
        public void FullMessage(
                    string payload, 
                    string padding, 
                    string type, 
                    string repeatindicator, 
                    string mmsi, 
                    string atontype, 
                    string nameaton, 
                    string accuracy, 
                    string longitude, 
                    string latitude, 
                    string positiona, 
                    string positionb, 
                    string positionc, 
                    string positiond, 
                    string epfdfixtype, 
                    string timestamp, 
                    string offposition, 
                    string atonstatus, 
                    string raimflag, 
                    string virtualaton, 
                    string assignedmode, 
                    string spare241, 
                    string nameatonext, 
                    string spareend, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("type", type);
            argumentsOfScenario.Add("repeatindicator", repeatindicator);
            argumentsOfScenario.Add("mmsi", mmsi);
            argumentsOfScenario.Add("atontype", atontype);
            argumentsOfScenario.Add("nameaton", nameaton);
            argumentsOfScenario.Add("accuracy", accuracy);
            argumentsOfScenario.Add("longitude", longitude);
            argumentsOfScenario.Add("latitude", latitude);
            argumentsOfScenario.Add("positiona", positiona);
            argumentsOfScenario.Add("positionb", positionb);
            argumentsOfScenario.Add("positionc", positionc);
            argumentsOfScenario.Add("positiond", positiond);
            argumentsOfScenario.Add("epfdfixtype", epfdfixtype);
            argumentsOfScenario.Add("timestamp", timestamp);
            argumentsOfScenario.Add("offposition", offposition);
            argumentsOfScenario.Add("atonstatus", atonstatus);
            argumentsOfScenario.Add("raimflag", raimflag);
            argumentsOfScenario.Add("virtualaton", virtualaton);
            argumentsOfScenario.Add("assignedmode", assignedmode);
            argumentsOfScenario.Add("spare241", spare241);
            argumentsOfScenario.Add("nameatonext", nameatonext);
            argumentsOfScenario.Add("spareend", spareend);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Full message", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 13
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Aids to Navigation Report", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then(string.Format("NmeaAisAidsToNavigationReportParser.Type is {0}", type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.RepeatIndicator is {0}", repeatindicator), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.Mmsi is {0}", mmsi), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.AidsToNavigationType is {0}", atontype), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.NameOfAidsToNavigation is {0}", nameaton), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.PositionAccuracy is {0}", accuracy), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.Longitude10000thMins is {0}", longitude), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.Latitude10000thMins is {0}", latitude), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.ReferenceForPositionA is {0}", positiona), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.ReferenceForPositionB is {0}", positionb), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.ReferenceForPositionC is {0}", positionc), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.ReferenceForPositionD is {0}", positiond), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.EpfdFixType is {0}", epfdfixtype), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.TimeStampSecond is {0}", timestamp), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.OffPositionIndicator is {0}", offposition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.AtoNStatus is {0}", atonstatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.RaimFlag is {0}", raimflag), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.VirtualAtoN is {0}", virtualaton), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.AssignedMode is {0}", assignedmode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.SpareBit241 is {0}", spare241), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.NameOfAidToNavigationExtension is {0}", nameatonext), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
    testRunner.And(string.Format("NmeaAisAidsToNavigationReportParser.SpareBitsAtEnd is {0}", spareend), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid out of range")]
        public void InvalidOutOfRange()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid out of range", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 44
    testRunner.When("I parse \'ENjV3u0;4a::PV@0b7WDHlP0000@IH6:@u?S800000I00\' with padding 6 as a Aids " +
                        "to Navigation Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
    testRunner.Then("throw an overflow error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
