// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CK.Ais.Net.Specs.AisMessageTypes
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DataLinkManagementMessageParserSpecsSteps")]
    public partial class DataLinkManagementMessageParserSpecsStepsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "DataLinkManagementMessageParserSpecs.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AisMessageTypes", "DataLinkManagementMessageParserSpecsSteps", "    In order process AIS messages from an nm4 file\r\n    As a developer\r\n    I wan" +
                    "t the NmeaAisDataLinkManagementMessageParser to be able to parse the payload sec" +
                    "tion of message type 20: Data link management message", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Message Type")]
        public void MessageType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Message Type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
    testRunner.When("I parse \'D02;bMhRl@fq6DA6DB0i6D0\' with padding 0 as a Data link management messag" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
    testRunner.Then("NmeaAisDataLinkManagementMessageParser.Type is 20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Full message")]
        [NUnit.Framework.TestCaseAttribute("D02;bMhRl@fq6DA6DB0i6D0", "0", "20", "0", "2288247", "0", "557", "1", "0", "750", "1125", "1", "0", "1125", "288", "3", "0", "1125", "", "", "", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("D02;bMR0tLfp00M6EpDu6D0", "0", "20", "0", "2288246", "0", "2063", "1", "6", "750", "0", "1", "6", "1125", "1925", "3", "6", "1125", "", "", "", "", "", null)]
        public void FullMessage(
                    string payload, 
                    string padding, 
                    string type, 
                    string repeatindicator, 
                    string mmsi, 
                    string spare38, 
                    string offset1, 
                    string slot1, 
                    string timeout1, 
                    string increment1, 
                    string offset2, 
                    string slot2, 
                    string timeout2, 
                    string increment2, 
                    string offset3, 
                    string slot3, 
                    string timeout3, 
                    string increment3, 
                    string offset4, 
                    string slot4, 
                    string timeout4, 
                    string increment4, 
                    string spareend, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("type", type);
            argumentsOfScenario.Add("repeatindicator", repeatindicator);
            argumentsOfScenario.Add("mmsi", mmsi);
            argumentsOfScenario.Add("spare38", spare38);
            argumentsOfScenario.Add("offset1", offset1);
            argumentsOfScenario.Add("slot1", slot1);
            argumentsOfScenario.Add("timeout1", timeout1);
            argumentsOfScenario.Add("increment1", increment1);
            argumentsOfScenario.Add("offset2", offset2);
            argumentsOfScenario.Add("slot2", slot2);
            argumentsOfScenario.Add("timeout2", timeout2);
            argumentsOfScenario.Add("increment2", increment2);
            argumentsOfScenario.Add("offset3", offset3);
            argumentsOfScenario.Add("slot3", slot3);
            argumentsOfScenario.Add("timeout3", timeout3);
            argumentsOfScenario.Add("increment3", increment3);
            argumentsOfScenario.Add("offset4", offset4);
            argumentsOfScenario.Add("slot4", slot4);
            argumentsOfScenario.Add("timeout4", timeout4);
            argumentsOfScenario.Add("increment4", increment4);
            argumentsOfScenario.Add("spareend", spareend);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Full message", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 13
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Data link management message", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then(string.Format("NmeaAisDataLinkManagementMessageParser.Type is {0}", type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
    testRunner.And(string.Format("NmeaAisDataLinkManagementMessageParser.RepeatIndicator is {0}", repeatindicator), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
    testRunner.And(string.Format("NmeaAisDataLinkManagementMessageParser.Mmsi is {0}", mmsi), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
    testRunner.And(string.Format("NmeaAisDataLinkManagementMessageParser.SpareBits38 is {0}", spare38), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
    testRunner.And(string.Format("NmeaAisDataLinkManagementMessageParser.Offset1 is {0}", offset1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
    testRunner.And(string.Format("NmeaAisDataLinkManagementMessageParser.SlotNumber1 is {0}", slot1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
    testRunner.And(string.Format("NmeaAisDataLinkManagementMessageParser.Timeout1 is {0}", timeout1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
    testRunner.And(string.Format("NmeaAisDataLinkManagementMessageParser.Increment1 is {0}", increment1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
    testRunner.And(string.Format("NmeaAisDataLinkManagementMessageParser.Offset2 is {0}", offset2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
    testRunner.And(string.Format("NmeaAisDataLinkManagementMessageParser.SlotNumber2 is {0}", slot2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
    testRunner.And(string.Format("NmeaAisDataLinkManagementMessageParser.Timeout2 is {0}", timeout2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
    testRunner.And(string.Format("NmeaAisDataLinkManagementMessageParser.Increment2 is {0}", increment2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
    testRunner.And(string.Format("NmeaAisDataLinkManagementMessageParser.Offset3 is {0}", offset3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
    testRunner.And(string.Format("NmeaAisDataLinkManagementMessageParser.SlotNumber3 is {0}", slot3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
    testRunner.And(string.Format("NmeaAisDataLinkManagementMessageParser.Timeout3 is {0}", timeout3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
    testRunner.And(string.Format("NmeaAisDataLinkManagementMessageParser.Increment3 is {0}", increment3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
    testRunner.And(string.Format("NmeaAisDataLinkManagementMessageParser.Offset4 is {0}", offset4), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
    testRunner.And(string.Format("NmeaAisDataLinkManagementMessageParser.SlotNumber4 is {0}", slot4), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
    testRunner.And(string.Format("NmeaAisDataLinkManagementMessageParser.Timeout4 is {0}", timeout4), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
    testRunner.And(string.Format("NmeaAisDataLinkManagementMessageParser.Increment4 is {0}", increment4), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
    testRunner.And(string.Format("NmeaAisDataLinkManagementMessageParser.SpareBitsAtEnd is {0}", spareend), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
